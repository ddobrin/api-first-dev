accelerator:
  displayName: API-First Spring Boot Development 
  description: A Spring Boot application generated from an OpenAPI spec with JVM/Native Image Compilation
  iconUrl: https://raw.githubusercontent.com/simple-starters/icons/master/icon-tanzu-light.png
  tags:
    - spring
    - cloud
    - openapi
    - serverless
    - native
  options:
    - name: artifactId
      label: Project Name
      description: Name of the project to be generated
      required: true
      dataType: string
      inputType: text
      defaultValue: api-first-project
    - name: artifactVersion
      label: Project Version
      description: The initial project version to be assigned, in Semver 2.0.0 format (x.y.z)
      required: true
      dataType: string
      inputType: text
      defaultValue: 0.0.1
    - name: basePackage
      label: Base Package
      description: Base package for the generated Java files
      required: true
      dataType: string
      inputType: text
      defaultValue: com.example
    - name: openapiSpec
      label: OpenAPI Specification
      description: Choose an OpenAPI spec to generate a Spring Boot app
      inputType: radio
      dataType: string
      required: true
      display: true
      defaultValue: petclinic
      choices: 
      - value: petclinic
        text: Petclinic API specification v1.0.0
      - value: demoapi
        text: APITest API specification V1.1.0 

    - name: deploymentType
      label: Deployment Choices
      display: true
      inputType: select
      description: Select the deployment model for your service
      choices:
      - value: none
        text: Skip deployment configurations
      - value: kubernetes-resource-simple 
        text: Kubernetes Deployment and Service
      - value: knative-resource-simple 
        text: Knative Service Deployment
      defaultValue: none
    - name: includeSkaffold
      label: Generate Skaffold file
      description: Include a Skaffold image YAML file for K8s deployment
      dataType: boolean
      defaultValue: false
      inputType: toggle
    - name: includeKpackImage
      label: Generate kpack file
      description: Include a kpack image YAML file
      dataType: boolean
      defaultValue: true
      inputType: toggle
    - name: prefixContainerRegistryName
      label: Registry Prefix
      description: Container Registry prefix, ex. gcr.io/project-name
      dataType: string
      inputType: text
      defaultValue: docker.io/triathlonguy

engine:
  merge:
    - include: [ "**" ]
      exclude: [ "kubernetes/**" ]
    - include: ["config.yaml"]
    - include: [ "pom.xml" ]
      chain:
      - type: ReplaceText
        substitutions:
        - text: "basePackage"
          with: "#basePackage"
      - type: ReplaceText
        substitutions:
        - text: "artifactId"
          with: "#artifactId"
      - type: ReplaceText
        substitutions: 
        - text: "artifactVersion"
          with: "#artifactVersion"

    # - include: [ "pom.xml" ]
    #   condition: "!(#activeProfiles.contains('jvm'))"
    #   chain:
    #   - type: ReplaceText
    #     substitutions:
    #     - text: '<!--start-jvm-->'
    #       with: "'<!--start-jvm'"
    #     - text: '<!--end-jvm-->'
    #       with: "'end-jvm-->'"
    # - include: [ "pom.xml" ]
    #   condition: "!(#activeProfiles.contains('jvm'))"
    #   chain:
    #     - type: ReplaceText
    #       substitutions:
    #         - text: '<!--start-jvm-->'
    #           with: "'<!--start-jvm'"
    #         - text: '<!--end-jvm-->'
    #           with: "'end-jvm-->'"
    # - include: [ "pom.xml" ]
    #   condition: "!(#activeProfiles.contains('jvm-image'))"
    #   chain:
    #     - type: ReplaceText
    #       substitutions:
    #         - text: '<!--start-jvm-image-->'
    #           with: "'<!--start-jvm-image'"
    #         - text: '<!--end-jvm-image-->'
    #           with: "'end-jvm-image-->'"
    # - include: [ "pom.xml" ]
    #   condition: "!(#activeProfiles.contains('native'))"
    #   chain:
    #     - type: ReplaceText
    #       substitutions:
    #         - text: '<!--start-native-->'
    #           with: "'<!--start-native'"
    #         - text: '<!--end-native-->'
    #           with: "'end-native-->'"
    # - include: [ "pom.xml" ]
    #   condition: "!(#activeProfiles.contains('native-image'))"
    #   chain:
    #     - type: ReplaceText
    #       substitutions:
    #         - text: '<!--start-native-image-->'
    #           with: "'<!--start-native-image'"
    #         - text: '<!--end-native-image-->'
    #           with: "'end-native-image-->'"

    # - include: ["kubernetes/kn/*/service*.yaml"]
    #   condition: "#deploymentType == 'knative-resource-simple'"
    #   chain:
    #   - type: ReplaceText
    #     substitutions:
    #     - text: "hello-function"
    #       with: "#artifactId"
    # - include: ["kubernetes/k8s/*/service*.yaml", "kubernetes/k8s/*/deployment*.yaml"]
    #   condition: "#deploymentType == 'kubernetes-resource-simple'"
    #   chain:
    #   - type: ReplaceText
    #     substitutions:
    #     - text: "hello-function"
    #       with: "#artifactId"
    # - include: ["kubernetes/k8s/*/skaffold*.yaml"]
    #   condition: "#includeSkaffold"
    #   chain:
    #     - type: ReplaceText
    #       substitutions:
    #         - text: "hello-function"
    #           with: "#artifactId"
    # - include: ["kubernetes/kpack/*/image*.yaml"]
    #   condition: "#includeKpackImage"
    #   # logical operators for conditions
    #   # condition: "#includeKpackImage and #deploymentType == 'none'"
    #   chain:
    #   - type: ReplaceText
    #     substitutions:
    #     - text: "hello-function"
    #       with: "#artifactId"
    # - include: ["kubernetes/kn/*/service*.yaml"]
    #   condition: "#deploymentType == 'knative-resource-simple'"
    #   chain:
    #   - type: ReplaceText
    #     substitutions:
    #     - text: "registryPrefix"
    #       with: "#prefixContainerRegistryName"
    # - include: ["kubernetes/k8s/*/service*.yaml", "kubernetes/k8s/*/deployment*.yaml"]
    #   condition: "#deploymentType == 'kubernetes-resource-simple'"
    #   chain:
    #   - type: ReplaceText
    #     substitutions:
    #     - text: "registryPrefix"
    #       with: "#prefixContainerRegistryName"

